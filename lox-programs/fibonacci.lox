

/* multiline comment, just slashes and stars */

// let's balance it
// note: does not support deletion, only add
// note: not correctly counting the height after rebalancing
class Node {
  init(key, value) {
    this.key = key;
    this.value = value;
    this.left = nil;
    this.right = nil;
    this.height = 0;
  }

  s() { 
    return ("{ key: " + this.key) +
      (", value: " + this.value) + 
      (", left: " + (this.left and this.left.s())) +
      (", right: " + (this.right and this.right.s())) +
      " }"; 
  }

  add(key, value) {
    if (key < this.key) {
      // add left 
      if (this.left) {
        this.left.add(key, value);
      } else {
        this.left = Node(key, value);
      }
    } else {
      // add right
      if (this.right) {
        this.right.add(key, value);
      } else {
        this.right = Node(key, value);
      }
    }
    this.reheight();
    this.rebalance();
  }

  balance() {
    return (this.right and this.right.height or -1) - (this.left and this.left.height or -1);
  }

  rebalance() {
    var b = this.balance();
    // four cases:
    // right, left, rightleft, and leftright
    if (b > 1) { // right unblanced, need some kind of left rotation
      if (this.right.balance() > 0) {
        print this.s();
        this.rotate_left(); 
        print "left rotated";
        print this.s();
      } else {
        this.rightleft();
        print "rightleft";
      }
    }
    if (b < -1) { // left unbalanced, need some kind of right rotation
      if (this.left.balance() < 0) {
        this.rotate_right();
        print "right rotated";
      } else {
        this.leftright();
        print "leftright";
      }
    }
  }

  // rotating by moving values around, modifying this node, and creating new nodes
  // that way, we don't have to track or modify the parent
  // I think these rotations are broken
  rotate_left() {
    // if there's a left node already, this will drop it!
    if (this.left != nil) {
      print "would drop a left";
      // print this.left.s();
      // print "from";
      // print this.s();
    }
    var oldLeft = this.left;
    this.left = Node(this.key, this.value);
    this.left.left = oldLeft;
    // this takes on the value and left child of its left child
    this.key = this.right.key;
    this.value = this.right.value;
    this.left = this.right.right;
  }

  rotate_right() {
    // this value becomes it's right child
    // if there's a right node already, this will drop it!
    if (this.right != nil) {
      print "would drop a right";
    }
    var oldRight = this.right;
    this.right = Node(this.key, this.value);
    this.right.right = oldRight;
    // this takes on the value and left child of its left child
    this.key = this.left.key;
    this.value = this.left.value;
    this.left = this.left.left;
  }

  leftright() {
    this.left.rotate_left();
    this.rotate_right();
  }

  rightleft() {
    this.right.rotate_right();
    this.rotate_left();
  }

  reheight() {
   // height is max(left.height || -1, right.height || -1) + 1
   var lh = this.left and this.left.height or -1;
   var rh = this.right and this.right.height or -1;

   if(lh > rh) {
     this.height = lh + 1;
   } else {
     this.height = rh + 1;
   }
  }

  get(key) {
    if (this.key == key) {
      return this.value;
    } else {
      if (key < this.key and this.left) {
        return this.left.get(key);
      } else {
        if (this.right) {
          return this.right.get(key);
        }
      }
    }
  }
}

class Results {
  init() {
    this.root = nil;
  }

  store(key, value) {
    if (this.root == nil) {
      this.root = Node(key, value);
    } else {
      this.root.add(key, value);   
    }
  }

  get(key) {
    if (this.root) {
      return this.root.get(key);
    }
  }
}

// umm, so we have to build a dictionary data structure for this to work
// so, I guess let's do that
fun memoize(f) {
  var results = Results();
  fun memoized(arg) {
    var stored = results.get(arg);
    if (stored) {
      return stored;
    } else {
      var calculated = f(arg);   
      results.store(arg, calculated);
      return calculated;
    }
  }
  return memoized;
}

fun fib(n) {
  if (n < 2) {
    return n;
  } else {
    return fib(n-1) + fib(n-2);
  }
}

var results = Results();
fun memoized_fib(n) {
  var stored = results.get(n);
  if (stored) {
    return stored;
  }
  var calculated;
  if (n < 2) {
    calculated = n;
  } else {
    calculated = memoized_fib(n-1) + memoized_fib(n-2);
  }
  results.store(n, calculated);
  return calculated;
}

var num = 30;

fun test_unmemoized() {
  print "unmemoized, fib of";
  print num;
  print fib(num);
}

fun test_memoized() {
  print "memoized, fib of";
  print num;
  print memoized_fib(num);
}

fun time(f) {
  var start = clock();
  f();
  var end = clock();
  print "calling function took ";
  print (end - start);
}

time(test_unmemoized);
time(test_memoized);
