// in theory, would be generated by bin/generate_ast.rs
// in parallel to expr.rs
use crate::expr::Expr;
use crate::token::Token;

pub enum Stmt {
    Print { expr: Box<Expr> },
    Expression { expr: Box<Expr> },
    Var { name: Token, initializer: Box<Expr> }
}

pub trait Visitor<T> {
    fn visit_print(&self, expr: &Expr) -> T;
    fn visit_expression(&self, expr: &Expr) -> T;
    fn visit_var(&self, name: &Token, initializer: &Expr) -> T;
}

impl Stmt {
    pub fn accept<T, V: Visitor<T>>(&self, visitor: &V) -> T {
	use crate::stmt::Stmt::*;
	match self {
	    Print { expr } => visitor.visit_print(expr),
	    Expression { expr } => visitor.visit_expression(expr),
	    Var { name, initializer } => visitor.visit_var(name, initializer),
	}
    }
}
