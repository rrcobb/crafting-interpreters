// Generated by bin/generate_ast.rs

use crate::token::Token;
pub trait Expr {
	fn accept(&self, visitor: &dyn Visitor) -> String;
}

pub trait Visitor {
	fn visit_binary(&self, expr: &Binary) -> String;
	fn visit_grouping(&self, expr: &Grouping) -> String;
	fn visit_literal(&self, expr: &Literal) -> String;
	fn visit_unary(&self, expr: &Unary) -> String;
}


pub struct Binary<'a> {
	pub left: &'a dyn Expr,
	pub operator: Token,
	pub right: &'a dyn Expr,
}

impl Expr for Binary<'_> {
	fn accept(&self, visitor: &dyn Visitor) -> String {
		visitor.visit_binary(self)
	}
}

pub struct Grouping<'a> {
	pub expression: &'a dyn Expr,
}
impl Expr for Grouping<'_> {
	fn accept(&self, visitor: &dyn Visitor) -> String {
		visitor.visit_grouping(self)
	}
}

pub enum Literal {
	False(bool),
	True(bool),
	Nil,
	Number(f64),
	Strng(String)
}
impl Expr for Literal {
	fn accept(&self, visitor: &dyn Visitor) -> String {
		visitor.visit_literal(self)
	}
}

pub struct Unary<'a> {
	pub operator: Token,
	pub right: &'a dyn Expr,
}
impl Expr for Unary<'_> {
	fn accept(&self, visitor: &dyn Visitor) -> String {
		visitor.visit_unary(self)
	}
}
