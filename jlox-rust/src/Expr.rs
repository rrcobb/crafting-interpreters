// Generated by bin/generate_ast.rs

use crate::token::Token;
pub enum Lit {
	False,
	True,
	Nil,
	Number(f64),
	Strng(String)
}

pub enum Expr {
	Binary {
		left: Box<Expr>,
		operator: Token,
		right: Box<Expr>,
	},
	Grouping {
		expression: Box<Expr>,
	},
	Literal {
		value: Lit,
	},
	Unary {
		operator: Token,
		right: Box<Expr>,
	}
}

pub trait Visitor<T> {
	fn visit_binary(&self, left: &Expr, operator: &Token, right: &Expr) -> T;
	fn visit_grouping(&self, expression: &Expr) -> T;
	fn visit_literal(&self, value: &Lit) -> T;
	fn visit_unary(&self, operator: &Token, right: &Expr) -> T;
}

impl Expr {
	pub fn accept<T, V: Visitor<T>>(&self, visitor: &V) -> T {
		use crate::expr::Expr::*;
		match self {
			Binary {left, operator, right} => visitor.visit_binary(left, operator, right),
			Grouping { expression } => visitor.visit_grouping(expression),
			Literal { value }=> visitor.visit_literal(value),
			Unary { operator, right } => visitor.visit_unary(operator, right),
		}
	}
}
